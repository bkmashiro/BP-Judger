/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 4.23.1
 * source: jsonmsg.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export class JSONMessage extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        value?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("value" in data && data.value != undefined) {
                this.value = data.value;
            }
        }
    }
    get value() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set value(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        value?: string;
    }): JSONMessage {
        const message = new JSONMessage({});
        if (data.value != null) {
            message.value = data.value;
        }
        return message;
    }
    toObject() {
        const data: {
            value?: string;
        } = {};
        if (this.value != null) {
            data.value = this.value;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.value.length)
            writer.writeString(1, this.value);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): JSONMessage {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new JSONMessage();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.value = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): JSONMessage {
        return JSONMessage.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedGameRuleProxyServiceService {
    static definition = {
        ValidateGamePreRequirements: {
            path: "/GameRuleProxyService/ValidateGamePreRequirements",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes))
        },
        ValidateMovePostRequirements: {
            path: "/GameRuleProxyService/ValidateMovePostRequirements",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes))
        },
        ValidateMove: {
            path: "/GameRuleProxyService/ValidateMove",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes))
        },
        AcceptMove: {
            path: "/GameRuleProxyService/AcceptMove",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes))
        },
        InitGame: {
            path: "/GameRuleProxyService/InitGame",
            requestStream: true,
            responseStream: true,
            requestSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: JSONMessage) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => JSONMessage.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract ValidateGamePreRequirements(call: grpc_1.ServerDuplexStream<JSONMessage, JSONMessage>): void;
    abstract ValidateMovePostRequirements(call: grpc_1.ServerDuplexStream<JSONMessage, JSONMessage>): void;
    abstract ValidateMove(call: grpc_1.ServerDuplexStream<JSONMessage, JSONMessage>): void;
    abstract AcceptMove(call: grpc_1.ServerDuplexStream<JSONMessage, JSONMessage>): void;
    abstract InitGame(call: grpc_1.ServerDuplexStream<JSONMessage, JSONMessage>): void;
}
export class GameRuleProxyServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedGameRuleProxyServiceService.definition, "GameRuleProxyService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    ValidateGamePreRequirements: GrpcChunkServiceInterface<JSONMessage, JSONMessage> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<JSONMessage, JSONMessage> => {
        return super.ValidateGamePreRequirements(metadata, options);
    };
    ValidateMovePostRequirements: GrpcChunkServiceInterface<JSONMessage, JSONMessage> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<JSONMessage, JSONMessage> => {
        return super.ValidateMovePostRequirements(metadata, options);
    };
    ValidateMove: GrpcChunkServiceInterface<JSONMessage, JSONMessage> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<JSONMessage, JSONMessage> => {
        return super.ValidateMove(metadata, options);
    };
    AcceptMove: GrpcChunkServiceInterface<JSONMessage, JSONMessage> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<JSONMessage, JSONMessage> => {
        return super.AcceptMove(metadata, options);
    };
    InitGame: GrpcChunkServiceInterface<JSONMessage, JSONMessage> = (metadata?: grpc_1.Metadata | grpc_1.CallOptions, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<JSONMessage, JSONMessage> => {
        return super.InitGame(metadata, options);
    };
}
